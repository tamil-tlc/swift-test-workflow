name: swift ci

on:
 push:
  branches: [ "main", "qa", "dev" ]

env:
 PROJECT_NAME: 'swift-test-workflow'
 SCHEME_NAME: 'swift-test-workflow'
 XCODE_VERSION: '16.1'
  
jobs:
 lint:
  runs-on: macos-latest

  steps:
   - name: checkout the code
     uses: actions/checkout@v4

   - name: saved swiftlint cache
     uses: actions/cache@v4
     with:
       path: ~/usr/local/bin/swiftlint
       key: swiftlint-${{ runner.os }}

    
   - name: install swiftlint
     run: brew install swiftlint


   - name: test swiftlint
     run: |
       swiftlint lint --reporter github-actions-logging --reporter json > swiftlint-report.json || true

   - name: upload artifact
     uses: actions/upload-artifact@v4
     if: always()
     with:
      name: swiftlint report
      path: swiftlint-report.json

 unit-test:
  needs: [lint]
  runs-on: macos-latest
  strategy:
   matrix:
    destination:
      -  "platform-ios-simulator_name-iphone16_OS-18.1"

  steps:
    - name: checkout the code
      uses: actions/checkout@v4

    - name: xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
       xcode-version: ${{env.XCODE_VERSION}}

    - name: cache derived data
      uses: actions/cache@v4
      with:
       path: ~/Library/Developer/Xcode/DerivedData
       key: ${{ runner.os }}-derived-data-${{ matrix.destination }}-${{ hashFiles('**/*.xcodeproj') }}

    - name: build and test
      run: |
        set -o pipefail
        xcodebuild test
        -project ${{ env.PROJECT-NAME }}.xcodeproj \
        -scheme ${{ env.SCHEME.NAME }}
        -destination "${{ matrix.destination }}" \
        -resultbundlepath Testresult ${{ strategy.job-index}} \
         enablecodecoverage YES \
         CODE_SIGNING_REQUIRED=NO \ 
         CODE_SIGNING_ALLOWED=NO \
         ONLY_ACTIVE_ARCH=YES \
         | xcpretty --report junit --output test_results.xml

    - name: upload test artifact
      uses: actions/upload-artifact@v4
      with:
       path: test_results.xml
   
